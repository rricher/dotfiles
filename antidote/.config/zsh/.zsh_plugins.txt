# zsh-users/zsh-completions is a popular plugin for adding supplemental completions.
# We combine the `path:` and `kind:fpath` annotations here:
zsh-users/zsh-completions path:src kind:fpath

# This is the recommended plugin for handling compinit and setting completion zstyles.
# It's designed to handle all the complexity of the Zsh completion system so the user
# doesn't have to.
mattmc3/ez-compinit

# There are also other plugins that handle completions if you prefer something else.
# However, ez-compinit is highly recommended, and was built by the author of antidote.
#
# If you want to use the belak/zsh-utils completion plugin to run your compinit, this
# plugin is meant to be run near the END of your .zsh_plugins.txt file after fpath is
# fully populated.
# belak/zsh-utils path:completion

### Regular Plugins
#
# Plugins are the simplest kind of bundles. You can point to a full git URL, or if you
# assume GitHub.com, then you can use the user/repo shorthand.
#
###
Aloxaf/fzf-tab
jirutka/zsh-shift-select
# peterhurford/up.zsh
# rummik/zsh-tailf
# mattmc3/zman
# agkozak/zsh-z

### Local Plugins
#
# Plugins don't have to come from GitHub. You can also use local files or directories to
# host your own custom plugins.
#
###
$ZDOTDIR/.aliases

### Prompts
#
# You can make certain themes available to the built-in Zsh prompt command using the
# `kind:fpath` annotation. A theme is not active for the prompt until this command is
# run:
#
#   autoload -Uz promptinit && promptinit
#   prompt ${prompt_name:-pure}
#
# There are two ways to load prompts.
# - Add multiple prompt plugins to your `$fpath` with `kind:fpath` and then later in
#   your .zshrc run the Zsh built-in `prompt` to select the theme.
# - Or, just load one prompt like a regular plugin.
#
###

# Use kind:fpath for prompts you want available to promptinit.
# romkatv/powerlevel10k kind:fpath

# Or, just load a prompt plugin the normal way.
# sindresorhus/pure

### Utilities
#
# Utilities aren't traditional Zsh plugins - they aren't sourced Zsh scripts. Instead
# they provide commands that can be executed from your terminal session. One good
# example is zsh-bench, which is a utility that benchmarks your Zsh config. Utility
# bundles can often be made available simply with the `kind:path` annotation.
#
###
# romkatv/zsh-bench kind:path

### Frameworks
#
# Frameworks are a collection of Zsh features, settings, and plugins meant to ease
# Zsh configuration. Unfortunately, all that power can come with serious drawbacks.
# Frameworks can often set more settings or aliases than you need, cluttering your Zsh
# config and slowing things down. Use with caution!
#
# Frameworks are handled in antidote using the `path:location/of/plugin` annotation.
#
###

### Framework: Oh-My-Zsh
#
# Oh-My-Zsh is a very popular Zsh framework. You might choose to use plugins from OMZ
# in your own config. Depending on which plugins you use, you may also need to include
# OMZ's entire "lib" directory. If you do this, be careful - "lib" configures a lot of
# very broad settings. If you are familiar with what you are doing, you may choose to
# only include parts of "lib".
#
#   # use all of lib
#   ohmyzsh/ohmyzsh path:lib
#   # -OR-, only use only the specific files we care about
#   ohmyzsh/ohmyzsh path:lib/clipboard.zsh
#
####
# getantidote/use-omz
# ohmyzsh/ohmyzsh path:lib/clipboard.zsh
# ohmyzsh/ohmyzsh path:plugins/copybuffer
# ohmyzsh/ohmyzsh path:plugins/copyfile
# ohmyzsh/ohmyzsh path:plugins/copypath
# ohmyzsh/ohmyzsh path:plugins/extract
# ohmyzsh/ohmyzsh path:plugins/magic-enter
# ohmyzsh/ohmyzsh path:plugins/fancy-ctrl-z

### Framework: zsh-utils
#
# zsh-utils is a micro-framework that is also well suited to pair with antidote. It
# provides much of the same core functionality from other bigger frameworks without the
# bloat or performance hit. Using zsh-utils, you may find you don't need much else.
# If you want a really thin framework, this is great.
#
###
belak/zsh-utils path:history
# belak/zsh-utils path:utility
# belak/zsh-utils path:editor

### Deferred Plugins
#
# Antidote allows you to defer loading plugins. This is similar to concepts like "turbo
# mode" in other plugin managers. Antidote handles deferring plugins by leveraging
# romkatv/zsh-defer, which "defers execution of a zsh command until zsh has nothing else
# to do and is waiting for user input". In general, you should not defer plugins unless
# you know for sure they properly support deferred loading, and there are no adverse
# side-effects (see: https://github.com/romkatv/zsh-defer#Caveats). However, for
# certain plugins, this can greatly increase your zsh startup speed.
#
###

# Syntax highlighting
#zsh-users/zsh-syntax-highlighting kind:defer
zdharma-continuum/fast-syntax-highlighting kind:defer

### Final Plugins
#
# Remember plugin order matters! Put plugins that need run last at the bottom of your
# .zsh_plugins.txt file.
#
###

# These popular core plugins should be loaded at the end
zsh-users/zsh-autosuggestions
zsh-users/zsh-history-substring-search
